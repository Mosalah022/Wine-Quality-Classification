# -*- coding: utf-8 -*-
"""Naive_Bayes.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1SQRGjvWcQvJzE8TsA6LnNFmKj0Pa44GM

#Cover Page

**Developed by:**


**Ahmed Saber - 41810077**

#Import the dataset from drive
"""

!gdown --id 1eBuFpD7VAbUCGwxfG5J70G3r2_Bkhqu8

"""#Importing libraries"""

import pandas as pd
import seaborn as sns
import numpy as np
import matplotlib.pyplot as plt
from sklearn.model_selection import train_test_split
from sklearn.metrics import mean_squared_error, classification_report, mean_absolute_error, confusion_matrix, accuracy_score
from sklearn.naive_bayes import GaussianNB 
from sklearn.preprocessing import StandardScaler,LabelEncoder

"""# show how the data looks like"""

data = pd.read_csv('winequality-white.csv',sep=';')
data.head()

data['quality label'] = data['quality'].apply(lambda x: 'low' if x<=5 else 'medium' if x<=7 else 'high')
print(data[['quality','quality label']].value_counts().sort_index())
data.head()

"""#Start Split the data and train"""

encoder = LabelEncoder()
data['quality label'] = encoder.fit_transform(data['quality label'])

X = data.drop('quality',axis=1)
y = data.quality

scaler = StandardScaler()
X = pd.DataFrame(scaler.fit_transform(X), columns=X.columns)
X.head()

X_train, X_test, y_train, y_test = train_test_split(X, y, test_size = 0.20, random_state=0, stratify=data['quality'])
print(len(X_train), "train +", len(X_test), "valid")

"""#Using Naive_Bayes for trainning """

classifier = GaussianNB()
classifier =classifier.fit(X_train, y_train)
y_pred  =  classifier.predict(X_test)

cm = confusion_matrix(y_test, y_pred)
cm

sns.heatmap(cm, annot=True)
plt.xlabel('Prediction')
plt.ylabel('Truth')

"""# Accurcy"""

var="%"
print("Accuracy: %0.1f" % (classifier.score(X_test,y_test)*100), var[0])

"""#find the mean square error"""

lin_mse = mean_squared_error(y_test, y_pred)
lin_rmse = np.sqrt(lin_mse)
lin_rmse

lin_mae = mean_absolute_error(y_test, y_pred)
lin_mae

"""# Classification Report"""

#print(classification_report(y_test, y_pred, target_names=['1', '2', '3']))