# -*- coding: utf-8 -*-
"""Decision_tree.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1Eeaq3weNd-9-Y6G2RSqPdkv7KK-aWEN5

#Cover Page

**Developed by:**

**Mina Tawadros - 41810291**

# Import the dataset from drive
"""

!gdown --id 1eBuFpD7VAbUCGwxfG5J70G3r2_Bkhqu8

"""#Importing libraries"""

import pandas as pd
import seaborn as sns
import numpy as np
import matplotlib.pyplot as plt
from sklearn.model_selection import train_test_split
from sklearn.metrics import mean_squared_error, classification_report, mean_absolute_error, confusion_matrix, accuracy_score
from sklearn.tree import DecisionTreeClassifier
from sklearn.preprocessing import StandardScaler,LabelEncoder

"""# show how the data looks like"""

data = pd.read_csv('winequality-white.csv',sep=';')

data.head()

data['quality label'] = data['quality'].apply(lambda x: 1 if x<=5 else 2 if x<=7 else 3)
print(data[['quality','quality label']].value_counts().sort_index())
data.head()

from scipy import stats
z = np.abs(stats.zscore(data))

data = data[(z < 3).all(axis=1)]

"""#Start Split the data and train"""

X = data.drop('quality',axis=1)
y = data['quality']

scaler = StandardScaler()
X = pd.DataFrame(scaler.fit_transform(X), columns=X.columns)
X.head()

X_train, X_test, y_train, y_test = train_test_split(X, y, test_size = 0.20, random_state=44, stratify=data['quality label'])

"""**Using Decision tree for trainning**

#using gini
"""

DT_gini = DecisionTreeClassifier(criterion = "gini", random_state = 43,max_depth=3, min_samples_leaf=5)
DT_gini.fit(X_train, y_train)

y_pred_1 = DT_gini.predict(X_test)
cm_1 = confusion_matrix(y_test, y_pred_1)

sns.heatmap(cm_1, annot=True)
plt.xlabel('Prediction')
plt.ylabel('Truth')

"""**Acuuracy**"""

var="%"
print("Accuracy: %0.1f" % (accuracy_score(y_test,y_pred_1)*100), var[0])

"""**classification repor**"""

print(classification_report(y_test, y_pred_1))

"""# using entropy"""

DT_entropy = DecisionTreeClassifier(criterion = "entropy", random_state = 0, max_depth = 3, min_samples_leaf = 5)
DT_entropy.fit(X_train, y_train)

y_pred_2 = DT_entropy.predict(X_test)
cm_2 = confusion_matrix(y_test, y_pred_2)

sns.heatmap(cm_2, annot=True)
plt.xlabel('Prediction')
plt.ylabel('Truth')

"""**Acuuracy**"""

var="%"
print("Accuracy: %0.1f" % (accuracy_score(y_test,y_pred_2)*100), var[0])

"""**classification repor**"""

print(classification_report(y_test, y_pred_2))

